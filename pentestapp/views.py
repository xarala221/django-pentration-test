from typing import List, Any

from django.shortcuts import render
#from django.http import HttpResponseRedirect
from django.contrib.auth.decorators import login_required
from .forms import ScanForm
import nmap

def index(request):
    print("SCANNNNNNNNER")
    target="127.0.0.1"
    nmScan = nmap.PortScanner()
    resultat=nmScan.scan(hosts=target, arguments='-p0-443')
    print("RESULTA")
    print(resultat)
    print('okkkkkkkkkkkkkk')
    return render(request, "pentestapp/index.html")

#@login_required(login_url='/admin/')
def scan(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        res = ""
        form = ScanForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            nmScan = nmap.PortScanner()
            print(form)
            target = request.POST['target']
            resultat = nmScan.scan(hosts=target, arguments='-sV')
            ports = resultat['scan'][target]['tcp']
            res = []

            for i in ports:
                    porti = ports[i]
                    print(porti['state'])
                    res.append({'port':i,'state':porti['state'], 'name':porti['name'], 'product':porti['product'], 'version':porti['version']})
        return render(request, "pentestapp/scan_result.html", {"resultat": res, "target": target})
    # if a GET (or any other method) we'll create a blank form
    else:
        form = ScanForm()
        return render(request, 'pentestapp/scan_form.html', {'form': form})

#@login_required(login_url='/admin/')
def scanReseau(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        res = ""
        form = ScanForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            nma = nmap.PortScanner()
            print(form)
            target = request.POST['target']
            result = nma.scan(hosts=target, arguments='-sP')
            res = []
            print(result)
            hosts_list = [x for x in nma.all_hosts()]
            t = len(hosts_list)
            for i in range(0, t):
                print("HÃ´te: ", hosts_list[i])
                host = hosts_list[i]
                print("         Nom: ", nma[host]['hostnames'])
               # hostname1 = int(nma[host]['hostnames']['name'])
               # print(hostname1)
               # hostname = hostname1[10:61]
                print("         Adresses: ", nma[host]['addresses'])
                print("         AdresseIPv4: ", nma[host]['addresses']['ipv4'])
                try:
                     print("         AdresseMAC: ", nma[host]['addresses']['mac'])
                     adresseMAC = nma[host]['addresses']['mac']
                except:
                    print("       AdressesMAC: none")
                    adresseMAC = "  none"
                print("         Etat: ", nma[host]['status'])
                print("         Etat: ", nma[host]['status']['state'])
                print()
                res.append({'host':hosts_list[i], 'state':nma[host]['status']['state'], 'hostname':nma[host]['hostnames'], 'adresseIPv4':nma[host]['addresses']['ipv4'], 'adresseMAC':adresseMAC})
        return render(request, "pentestapp/scan_reseau_result.html", {"resultat": res, "result": result})
    # if a GET (or any other method) we'll create a blank form
    else:
        form = ScanForm()
        return render(request, 'pentestapp/scan_reseau_form.html', {'form': form})
def analyse(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})
def exploit(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})
def postExploit(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})
def rapport(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})
def pentestSys(request):
    return render(request, "pentestapp/pentestSys.html", {})
def pentestWeb(request):
    return render(request, "pentestapp/pentestWeb.html", {})
def collecte(request):
    col = "collecte d'informations"
    return render(request, "pentestapp/collecte.html", {"col": col})
